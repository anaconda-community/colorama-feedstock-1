name: Integration test

on:
  schedule:
    - cron: 0 12 * * *
  workflow_dispatch: {}

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3

      - name: Create Conda environment with abs
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: false
          environment-name: integration-test
          cache-downloads: true
          log-level: warning
          channels: conda-forge,distro-tooling
          extra-specs: |            
            yq

      - name: Get build number
        id: build_number
        run: |          
          value=$(yq '.build.number' recipe/meta.yaml)
          ((value++))
          echo "result=$value" >> $GITHUB_OUTPUT          

      - name: Update recipe
        id: recipe
        run: |          
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"          
          yq -i '.build.number = ${{ steps.build_number.outputs.result }}' recipe/meta.yaml
          git add recipe/meta.yaml
          git commit -m "update build number" && git push --set-upstream origin main --force

      - name: Run integration test
        run: gh -R anaconda-community/aggregate workflow run "Integration Test"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Poll Repodata.json
        id: poll_repodata
        run: |
          timeout=1800  # 30 minutes
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
          
            # Make HTTP request and check value change condition
            response=$(curl -s https://staging.continuum.io/community/dev/noarch/repodata.json)            
            package=$(echo "$response" | jq -r '.packages."community-integration-test-0.4.6-pyhd3eb1b0_${{ steps.build_number.outputs.result }}.tar.gz2"')
            if [[ "$package" != "null" ]]; then
              echo "Found package in repodata.json: $package"
              break
            fi
          
            # Check if timeout reached
            if [[ $elapsed_time -gt $timeout ]]; then
              echo "Timeout reached, did not detect package with ${{ steps.build_number.outputs.result }} within 30 minutes."
              exit 1
            fi
          
            sleep 60  # Wait for 1 minute before polling again
          done